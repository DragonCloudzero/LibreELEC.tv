diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
index 7e41ab0b64..d43687b895 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
@@ -20,10 +20,13 @@
 
 #include "RendererDRMPRIME.h"
 
+#include "ServiceBroker.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderCapture.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFlags.h"
+#include "settings/DisplaySettings.h"
 #include "utils/log.h"
+#include "windowing/GraphicContext.h"
 
 static CWinSystemGbmGLESContext *m_pWinSystem;
 
@@ -34,12 +37,14 @@ CRendererDRMPRIME::CRendererDRMPRIME(std::shared_ptr<CDRMUtils> drm)
 
 CRendererDRMPRIME::~CRendererDRMPRIME()
 {
+  m_DRM->DisableVideoLayer();
   Reset();
 }
 
 CBaseRenderer* CRendererDRMPRIME::Create(CVideoBuffer* buffer)
 {
-  if (buffer && dynamic_cast<CVideoBufferDRMPRIME*>(buffer))
+  // only use this renderer when video plane is supported, TODO: fall back to a EGL_EXT_image_dma_buf_import renderer
+  if (buffer && dynamic_cast<CVideoBufferDRMPRIME*>(buffer) && m_pWinSystem->m_DRM->HasVideoPlane())
     return new CRendererDRMPRIME(m_pWinSystem->m_DRM);
 
   return nullptr;
@@ -75,6 +80,16 @@ bool CRendererDRMPRIME::Configure(const VideoPicture& picture, float fps, unsign
   return true;
 }
 
+void CRendererDRMPRIME::ManageRenderArea()
+{
+  RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo();
+  CBaseRenderer::ManageRenderArea();
+  CalcNormalRenderRect(0, 0, info.iScreenWidth, info.iScreenHeight,
+                       GetAspectRatio() * CDisplaySettings::GetInstance().GetPixelRatio(),
+                       fmin(CDisplaySettings::GetInstance().GetZoomAmount(), 1.0f),
+                       CDisplaySettings::GetInstance().GetVerticalShift());
+}
+
 void CRendererDRMPRIME::AddVideoPicture(const VideoPicture& picture, int index, double currentClock)
 {
   BUFFER& buf = m_buffers[index];
@@ -225,6 +240,8 @@ void CRendererDRMPRIME::SetVideoPlane(CVideoBufferDRMPRIME* buffer)
     uint32_t src_w = buffer->GetWidth() << 16;
     uint32_t src_h = buffer->GetHeight() << 16;
 
+    // TODO: m_DRM->SetVideoPlane(buffer->m_fb_id, crtc_x, crtc_y, crtc_w, crtc_h, src_x, src_y, src_w, src_h);
+
     if(m_DRM->m_req)
     {
       m_DRM->AddProperty(m_DRM->m_req, m_DRM->m_primary_plane, "FB_ID",   buffer->m_fb_id);
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
index a8ef0d3d95..d34f91ede7 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.h
@@ -55,6 +55,9 @@ public:
   bool Supports(ERENDERFEATURE feature) override;
   bool Supports(ESCALINGMETHOD method) override;
 
+protected:
+  void ManageRenderArea() override;
+
 private:
   void Reset();
   void SetVideoPlane(CVideoBufferDRMPRIME* buffer);
diff --git a/xbmc/windowing/gbm/DRMAtomic.cpp b/xbmc/windowing/gbm/DRMAtomic.cpp
index 48276d4aa1..fff6e90873 100644
--- a/xbmc/windowing/gbm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/DRMAtomic.cpp
@@ -59,7 +59,7 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
       return;
     }
 
-    if (!videoLayer)
+    if (!videoLayer && m_overlay_plane->plane)
     {
       // disable overlay plane on modeset
       AddProperty(m_req, m_overlay_plane, "FB_ID", 0);
@@ -67,7 +67,7 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
     }
   }
 
-  if (videoLayer)
+  if (videoLayer && m_overlay_plane->plane)
     plane = m_overlay_plane;
   else
     plane = m_primary_plane;
@@ -78,8 +78,8 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
     AddProperty(m_req, plane, "CRTC_ID", m_crtc->crtc->crtc_id);
     AddProperty(m_req, plane, "SRC_X", 0);
     AddProperty(m_req, plane, "SRC_Y", 0);
-    AddProperty(m_req, plane, "SRC_W", m_mode->hdisplay << 16);
-    AddProperty(m_req, plane, "SRC_H", m_mode->vdisplay << 16);
+    AddProperty(m_req, plane, "SRC_W", m_width << 16);
+    AddProperty(m_req, plane, "SRC_H", m_height << 16);
     AddProperty(m_req, plane, "CRTC_X", 0);
     AddProperty(m_req, plane, "CRTC_Y", 0);
     AddProperty(m_req, plane, "CRTC_W", m_mode->hdisplay);
@@ -116,6 +116,34 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
   m_req = drmModeAtomicAlloc();
 }
 
+void CDRMAtomic::DisableVideoLayer()
+{
+  if (m_req)
+  {
+    AddProperty(m_req, m_primary_plane, "FB_ID", 0);
+    AddProperty(m_req, m_primary_plane, "CRTC_ID", 0);
+
+    auto ret = drmModeAtomicCommit(m_fd, m_req, DRM_MODE_ATOMIC_TEST_ONLY, nullptr);
+    if (ret < 0)
+    {
+      CLog::Log(LOGERROR, "CDRMAtomic::%s - test commit failed: %s", __FUNCTION__, strerror(errno));
+    }
+    else if (ret == 0)
+    {
+      ret = drmModeAtomicCommit(m_fd, m_req, 0, nullptr);
+      if (ret < 0)
+      {
+        CLog::Log(LOGERROR, "CDRMAtomic::%s - atomic commit failed: %s", __FUNCTION__, strerror(errno));
+      }
+    }
+
+    drmModeAtomicFree(m_req);
+    m_req = drmModeAtomicAlloc();
+  }
+
+  m_need_modeset = true;
+}
+
 void CDRMAtomic::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
 {
   uint32_t flags = 0;
@@ -143,25 +171,14 @@ void CDRMAtomic::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
 
 bool CDRMAtomic::InitDrm()
 {
-  if (!CDRMUtils::OpenDrm())
+  if (!CDRMUtils::OpenDrm(true) ||
+      !CDRMUtils::InitDrm())
   {
     return false;
   }
 
-  auto ret = drmSetClientCap(m_fd, DRM_CLIENT_CAP_ATOMIC, 1);
-  if (ret)
-  {
-    CLog::Log(LOGERROR, "CDRMAtomic::%s - no atomic modesetting support: %s", __FUNCTION__, strerror(errno));
-    return false;
-  }
-
   m_req = drmModeAtomicAlloc();
 
-  if (!CDRMUtils::InitDrm())
-  {
-    return false;
-  }
-
   CLog::Log(LOGDEBUG, "CDRMAtomic::%s - initialized atomic DRM", __FUNCTION__);
   return true;
 }
diff --git a/xbmc/windowing/gbm/DRMAtomic.h b/xbmc/windowing/gbm/DRMAtomic.h
index 5795670c3b..a8540371b7 100644
--- a/xbmc/windowing/gbm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/DRMAtomic.h
@@ -32,6 +32,7 @@ public:
   virtual bool SetActive(bool active) override;
   virtual bool InitDrm() override;
   virtual void DestroyDrm() override;
+  virtual void DisableVideoLayer() override;
 
 private:
   void DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer);
diff --git a/xbmc/windowing/gbm/DRMLegacy.cpp b/xbmc/windowing/gbm/DRMLegacy.cpp
index dfc2a56bd2..c01cf00377 100644
--- a/xbmc/windowing/gbm/DRMLegacy.cpp
+++ b/xbmc/windowing/gbm/DRMLegacy.cpp
@@ -160,12 +160,8 @@ void CDRMLegacy::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
 
 bool CDRMLegacy::InitDrm()
 {
-  if (!CDRMUtils::OpenDrm())
-  {
-    return false;
-  }
-
-  if (!CDRMUtils::InitDrm())
+  if (!CDRMUtils::OpenDrm(false) ||
+      !CDRMUtils::InitDrm())
   {
     return false;
   }
diff --git a/xbmc/windowing/gbm/DRMUtils.cpp b/xbmc/windowing/gbm/DRMUtils.cpp
index d0f077d455..5525f3ee27 100644
--- a/xbmc/windowing/gbm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/DRMUtils.cpp
@@ -38,13 +38,20 @@
 
 CDRMUtils::CDRMUtils()
   : m_connector(new connector)
-  , m_encoder(new encoder)
   , m_crtc(new crtc)
   , m_primary_plane(new plane)
   , m_overlay_plane(new plane)
 {
 }
 
+CDRMUtils::~CDRMUtils()
+{
+  delete m_connector;
+  delete m_crtc;
+  delete m_primary_plane;
+  delete m_overlay_plane;
+}
+
 void CDRMUtils::WaitVBlank()
 {
   drmVBlank vbl;
@@ -56,6 +63,8 @@ void CDRMUtils::WaitVBlank()
 bool CDRMUtils::SetMode(RESOLUTION_INFO& res)
 {
   m_mode = &m_connector->connector->modes[atoi(res.strId.c_str())];
+  m_width = res.iWidth;
+  m_height = res.iHeight;
 
   CLog::Log(LOGDEBUG, "CDRMUtils::%s - found crtc mode: %dx%d%s @ %d Hz",
             __FUNCTION__,
@@ -132,7 +141,10 @@ static bool GetProperties(int fd, uint32_t id, uint32_t type, struct drm_object
 {
   drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(fd, id, type);
   if (!props)
+  {
+    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get properties for object %u", __FUNCTION__, id);
     return false;
+  }
 
   object->id = id;
   object->type = type;
@@ -202,284 +214,182 @@ bool CDRMUtils::SetProperty(struct drm_object *object, const char *name, uint64_
   return true;
 }
 
-bool CDRMUtils::GetResources()
-{
-  m_drm_resources = drmModeGetResources(m_fd);
-  if(!m_drm_resources)
-  {
-    return false;
-  }
-
-  return true;
-}
-
-bool CDRMUtils::GetConnector()
+static drmModeConnectorPtr GetConnector(int fd, drmModeResPtr resources)
 {
-  for(auto i = 0; i < m_drm_resources->count_connectors; i++)
+  uint32_t fallback_id = 0;
+  for (int i = 0; i < resources->count_connectors; i++)
   {
-    m_connector->connector = drmModeGetConnector(m_fd,
-                                                      m_drm_resources->connectors[i]);
-    if(m_connector->connector->connection == DRM_MODE_CONNECTED)
+    drmModeConnectorPtr connector = drmModeGetConnector(fd, resources->connectors[i]);
+    if (connector &&
+        connector->connection == DRM_MODE_CONNECTED &&
+        connector->count_modes > 0)
     {
-      CLog::Log(LOGDEBUG, "CDRMUtils::%s - found connector: %d", __FUNCTION__,
-                                                                 m_connector->connector->connector_id);
-      break;
+      // Prefer a connected connector with an attached encoder and modes
+      if (connector->encoder_id)
+      {
+        CLog::Log(LOGDEBUG, "CDRMUtils::%s - found connector %u with encoder %u and %d modes", __FUNCTION__, connector->connector_id, connector->encoder_id, connector->count_modes);
+        return connector;
+      }
+      else if (!fallback_id)
+      {
+        // Fall back to first connected connector with modes
+        fallback_id = connector->connector_id;
+      }
     }
-    drmModeFreeConnector(m_connector->connector);
-    m_connector->connector = nullptr;
-  }
-
-  if(!m_connector->connector)
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get connector: %s", __FUNCTION__, strerror(errno));
-    return false;
+    drmModeFreeConnector(connector);
   }
 
-  if (!GetProperties(m_fd, m_connector->connector->connector_id, DRM_MODE_OBJECT_CONNECTOR, m_connector))
+  if (fallback_id)
   {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get connector %u properties: %s", __FUNCTION__, m_connector->connector->connector_id, strerror(errno));
-    return false;
+    drmModeConnectorPtr connector = drmModeGetConnector(fd, fallback_id);
+    if (connector)
+    {
+      CLog::Log(LOGDEBUG, "CDRMUtils::%s - found connector %u with %d modes", __FUNCTION__, connector->connector_id, connector->count_modes);
+      return connector;
+    }
   }
 
-  return true;
+  CLog::Log(LOGERROR, "CDRMUtils::%s - could not find any connector", __FUNCTION__);
+  return nullptr;
 }
 
-bool CDRMUtils::GetEncoder()
+static drmModeCrtcPtr GetCrtc(int fd, drmModeResPtr resources, drmModeConnectorPtr connector)
 {
-  for(auto i = 0; i < m_drm_resources->count_encoders; i++)
+  // Prefer the attached encoder crtc
+  if (connector->encoder_id)
   {
-    m_encoder->encoder = drmModeGetEncoder(m_fd, m_drm_resources->encoders[i]);
-    if(m_encoder->encoder->encoder_id == m_connector->connector->encoder_id)
+    drmModeEncoderPtr encoder = drmModeGetEncoder(fd, connector->encoder_id);
+    if (encoder && encoder->crtc_id)
     {
-      CLog::Log(LOGDEBUG, "CDRMUtils::%s - found encoder: %d", __FUNCTION__,
-                                                               m_encoder->encoder->encoder_id);
-      break;
+      drmModeCrtcPtr crtc = drmModeGetCrtc(fd, encoder->crtc_id);
+      if (crtc)
+      {
+        CLog::Log(LOGDEBUG, "CDRMUtils::%s - found crtc %u with encoder %u", __FUNCTION__, crtc->crtc_id, encoder->encoder_id);
+        drmModeFreeEncoder(encoder);
+        return crtc;
+      }
     }
-    drmModeFreeEncoder(m_encoder->encoder);
-    m_encoder->encoder = nullptr;
+    drmModeFreeEncoder(encoder);
   }
 
-  if(!m_encoder->encoder)
+  // Fall back to first valid encoder and crtc combo
+  for (int i = 0; i < connector->count_encoders; i++)
   {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get encoder: %s", __FUNCTION__, strerror(errno));
-    return false;
-  }
-
-  return true;
-}
-
-bool CDRMUtils::GetCrtc()
-{
-  for(auto i = 0; i < m_drm_resources->count_crtcs; i++)
-  {
-    m_crtc->crtc = drmModeGetCrtc(m_fd, m_drm_resources->crtcs[i]);
-    if(m_crtc->crtc->crtc_id == m_encoder->encoder->crtc_id)
+    drmModeEncoderPtr encoder = drmModeGetEncoder(fd, connector->encoders[i]);
+    if (encoder)
     {
-      CLog::Log(LOGDEBUG, "CDRMUtils::%s - found crtc: %d", __FUNCTION__,
-                                                            m_crtc->crtc->crtc_id);
-      m_crtc_index = i;
-      break;
+      for (int j = 0; j < resources->count_crtcs; j++)
+      {
+        if (encoder->possible_crtcs & (1 << j))
+        {
+          drmModeCrtcPtr crtc = drmModeGetCrtc(fd, resources->crtcs[j]);
+          if (crtc)
+          {
+            CLog::Log(LOGDEBUG, "CDRMUtils::%s - found crtc %u with encoder %u", __FUNCTION__, crtc->crtc_id, encoder->encoder_id);
+            drmModeFreeEncoder(encoder);
+            return crtc;
+          }
+        }
+      }
+      drmModeFreeEncoder(encoder);
     }
-    drmModeFreeCrtc(m_crtc->crtc);
-    m_crtc->crtc = nullptr;
   }
 
-  if(!m_crtc->crtc)
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get crtc: %s", __FUNCTION__, strerror(errno));
-    return false;
-  }
+  CLog::Log(LOGERROR, "CDRMUtils::%s - could not find any crtc", __FUNCTION__);
+  return nullptr;
+}
 
-  if (!GetProperties(m_fd, m_crtc->crtc->crtc_id, DRM_MODE_OBJECT_CRTC, m_crtc))
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get crtc %u properties: %s", __FUNCTION__, m_crtc->crtc->crtc_id, strerror(errno));
-    return false;
-  }
+static int GetCrtcIndex(drmModeResPtr resources, drmModeCrtcPtr crtc)
+{
+  for (int i = 0; i < resources->count_crtcs; i++)
+    if (crtc->crtc_id == resources->crtcs[i])
+      return i;
 
-  return true;
+  CLog::Log(LOGERROR, "CDRMUtils::%s - could not find crtc index for crtc %u", __FUNCTION__, crtc->crtc_id);
+  return 0;
 }
 
-bool CDRMUtils::GetPreferredMode()
+static drmModeModeInfoPtr GetPreferredMode(drmModeConnectorPtr connector)
 {
-  for(auto i = 0, area = 0; i < m_connector->connector->count_modes; i++)
+  drmModeModeInfoPtr fallback_mode = nullptr;
+  for (int i = 0, fallback_area = 0; i < connector->count_modes; i++)
   {
-    drmModeModeInfo *current_mode = &m_connector->connector->modes[i];
-
-    if(current_mode->type & DRM_MODE_TYPE_PREFERRED)
+    drmModeModeInfoPtr mode = &connector->modes[i];
+    if (mode->type & DRM_MODE_TYPE_PREFERRED)
     {
-      m_mode = current_mode;
-      CLog::Log(LOGDEBUG,
-                "CDRMUtils::%s - found preferred mode: %dx%d%s @ %d Hz",
-                __FUNCTION__,
-                m_mode->hdisplay,
-                m_mode->vdisplay,
-                m_mode->flags & DRM_MODE_FLAG_INTERLACE ? "i" : "",
-                m_mode->vrefresh);
-      break;
+      CLog::Log(LOGDEBUG, "CDRMUtils::%s - found preferred mode %dx%d @ %d Hz", __FUNCTION__, mode->hdisplay, mode->vdisplay, mode->vrefresh);
+      return mode;
     }
 
-    auto current_area = current_mode->hdisplay * current_mode->vdisplay;
-    if (current_area > area)
+    // Fall back to mode with highest resolution or 1920x1080 @ 60 Hz
+    int area = mode->hdisplay * mode->vdisplay;
+    if (area > fallback_area ||
+        (mode->hdisplay == 1920 &&
+         mode->vdisplay == 1080 &&
+         mode->vrefresh == 60 &&
+         mode->clock == 148500))
     {
-      m_mode = current_mode;
-      area = current_area;
+      fallback_mode = mode;
+      fallback_area = area;
     }
   }
 
-  if(!m_mode)
+  if (fallback_mode)
   {
-    CLog::Log(LOGDEBUG, "CDRMUtils::%s - failed to find preferred mode", __FUNCTION__);
-    return false;
+    CLog::Log(LOGDEBUG, "CDRMUtils::%s - found fallback mode %dx%d @ %d Hz", __FUNCTION__, fallback_mode->hdisplay, fallback_mode->vdisplay, fallback_mode->vrefresh);
+    return fallback_mode;
   }
 
-  return true;
+  CLog::Log(LOGERROR, "CDRMUtils::%s - could not find preferred mode", __FUNCTION__);
+  return nullptr;
 }
 
-bool CDRMUtils::GetPlanes()
+static bool SupportsFormat(drmModePlanePtr plane, uint32_t format)
 {
-  drmModePlaneResPtr plane_resources;
-  uint32_t primary_plane_id = 0;
-  uint32_t overlay_plane_id = 0;
-  uint32_t fourcc = 0;
+  for (uint32_t i = 0; i < plane->count_formats; i++)
+    if (plane->formats[i] == format)
+      return true;
 
-  plane_resources = drmModeGetPlaneResources(m_fd);
-  if (!plane_resources)
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlaneResources failed: %s", __FUNCTION__, strerror(errno));
-    return false;
-  }
+  return false;
+}
 
-  for (uint32_t i = 0; i < plane_resources->count_planes; i++)
+static drmModePlanePtr GetPlane(int fd, drmModePlaneResPtr resources, int crtc_index, uint32_t type)
+{
+  for (uint32_t i = 0; i < resources->count_planes; i++)
   {
-    uint32_t id = plane_resources->planes[i];
-    drmModePlanePtr plane = drmModeGetPlane(m_fd, id);
-    if (!plane)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlane(%u) failed: %s", __FUNCTION__, id, strerror(errno));
-      continue;
-    }
-
-    if (plane->possible_crtcs & (1 << m_crtc_index))
+    drmModePlanePtr plane = drmModeGetPlane(fd, resources->planes[i]);
+    if (plane && plane->possible_crtcs & (1 << crtc_index))
     {
-      drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(m_fd, id, DRM_MODE_OBJECT_PLANE);
-
-      for (uint32_t j = 0; j < props->count_props; j++)
+      drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(fd, plane->plane_id, DRM_MODE_OBJECT_PLANE);
+      if (props)
       {
-        drmModePropertyPtr p = drmModeGetProperty(m_fd, props->props[j]);
-
-        if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] == DRM_PLANE_TYPE_PRIMARY) && (primary_plane_id == 0))
-        {
-          CLog::Log(LOGDEBUG, "CDRMUtils::%s - found primary plane: %u", __FUNCTION__, id);
-          primary_plane_id = id;
-        }
-        else if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] == DRM_PLANE_TYPE_OVERLAY) && (overlay_plane_id == 0))
+        for (uint32_t j = 0; j < props->count_props; j++)
         {
-          CLog::Log(LOGDEBUG, "CDRMUtils::%s - found overlay plane: %u", __FUNCTION__, id);
-          overlay_plane_id = id;
+          drmModePropertyPtr prop = drmModeGetProperty(fd, props->props[j]);
+          if (prop &&
+              !strcmp(prop->name, "type") &&
+              props->prop_values[j] == type)
+          {
+            CLog::Log(LOGDEBUG, "CDRMUtils::%s - found plane %u", __FUNCTION__, plane->plane_id);
+            drmModeFreeProperty(prop);
+            drmModeFreeObjectProperties(props);
+            return plane;
+          }
+          drmModeFreeProperty(prop);
         }
-
-        drmModeFreeProperty(p);
       }
-
       drmModeFreeObjectProperties(props);
     }
-
     drmModeFreePlane(plane);
   }
 
-  drmModeFreePlaneResources(plane_resources);
-
-  // primary plane
-  m_primary_plane->plane = drmModeGetPlane(m_fd, primary_plane_id);
-  if (!m_primary_plane->plane)
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u: %s", __FUNCTION__, primary_plane_id, strerror(errno));
-    return false;
-  }
-
-  if (!GetProperties(m_fd, primary_plane_id, DRM_MODE_OBJECT_PLANE, m_primary_plane))
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u properties: %s", __FUNCTION__, primary_plane_id, strerror(errno));
-    return false;
-  }
-
-  for (uint32_t i = 0; i < m_primary_plane->plane->count_formats; i++)
-  {
-    /* we want an alpha layer so break if we find one */
-    if (m_primary_plane->plane->formats[i] == DRM_FORMAT_XRGB8888)
-    {
-      fourcc = DRM_FORMAT_XRGB8888;
-      m_primary_plane->format = fourcc;
-    }
-    else if (m_primary_plane->plane->formats[i] == DRM_FORMAT_ARGB8888)
-    {
-      fourcc = DRM_FORMAT_ARGB8888;
-      m_primary_plane->format = fourcc;
-      break;
-    }
-  }
-
-  if (fourcc == 0)
-  {
-    CLog::Log(LOGERROR, "CDRMUtils::%s - could not find a suitable primary plane format", __FUNCTION__);
-    return false;
-  }
-
-  CLog::Log(LOGDEBUG, "CDRMUtils::%s - primary plane format: %c%c%c%c", __FUNCTION__, fourcc, fourcc >> 8, fourcc >> 16, fourcc >> 24);
-
-  if (overlay_plane_id != 0)
-  {
-    // overlay plane
-    m_overlay_plane->plane = drmModeGetPlane(m_fd, overlay_plane_id);
-    if (!m_overlay_plane->plane)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u: %s", __FUNCTION__, overlay_plane_id, strerror(errno));
-      return false;
-    }
-
-    if (!GetProperties(m_fd, overlay_plane_id, DRM_MODE_OBJECT_PLANE, m_overlay_plane))
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u properties: %s", __FUNCTION__, overlay_plane_id, strerror(errno));
-      return false;
-    }
-
-    fourcc = 0;
-
-    for (uint32_t i = 0; i < m_overlay_plane->plane->count_formats; i++)
-    {
-      /* we want an alpha layer so break if we find one */
-      if (m_overlay_plane->plane->formats[i] == DRM_FORMAT_XRGB8888)
-      {
-        fourcc = DRM_FORMAT_XRGB8888;
-        m_overlay_plane->format = fourcc;
-      }
-      else if(m_overlay_plane->plane->formats[i] == DRM_FORMAT_ARGB8888)
-      {
-        fourcc = DRM_FORMAT_ARGB8888;
-        m_overlay_plane->format = fourcc;
-        break;
-      }
-    }
-
-    if (fourcc == 0)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - could not find a suitable overlay plane format", __FUNCTION__);
-      return false;
-    }
-
-    CLog::Log(LOGDEBUG, "CDRMUtils::%s - overlay plane format: %c%c%c%c", __FUNCTION__, fourcc, fourcc >> 8, fourcc >> 16, fourcc >> 24);
-  }
-  else
-  {
-    delete m_overlay_plane;
-    m_overlay_plane = m_primary_plane;
-  }
-  return true;
+  CLog::Log(LOGERROR, "CDRMUtils::%s - could not find plane", __FUNCTION__);
+  return nullptr;
 }
 
-bool CDRMUtils::OpenDrm()
+bool CDRMUtils::OpenDrm(bool atomic)
 {
-  std::vector<const char*>modules =
+  std::vector<const char *> modules =
   {
     "i915",
     "amdgpu",
@@ -495,7 +405,7 @@ bool CDRMUtils::OpenDrm()
     "meson"
   };
 
-  for(int i = 0; i < 10; ++i)
+  for (int i = 0; i < 10; ++i)
   {
     std::string device = "/dev/dri/card";
     device.append(std::to_string(i));
@@ -503,90 +413,123 @@ bool CDRMUtils::OpenDrm()
     for (auto module : modules)
     {
       m_fd = drmOpen(module, device.c_str());
-      if (m_fd >= 0)
+      if (m_fd < 0)
+        continue;
+
+      if (drmSetClientCap(m_fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1))
       {
-        if(!GetResources())
-        {
-          continue;
-        }
+        CLog::Log(LOGERROR, "CDRMUtils::%s - no universal planes support", __FUNCTION__);
+        goto close;
+      }
 
-        if(!GetConnector())
-        {
-          continue;
-        }
+      if (atomic && drmSetClientCap(m_fd, DRM_CLIENT_CAP_ATOMIC, 1))
+      {
+        CLog::Log(LOGERROR, "CDRMUtils::%s - no atomic modesetting support", __FUNCTION__);
+        goto close;
+      }
 
-        drmModeFreeResources(m_drm_resources);
-        m_drm_resources = nullptr;
+      m_resources = drmModeGetResources(m_fd);
+      if (!m_resources)
+        goto close;
 
-        drmModeFreeConnector(m_connector->connector);
-        m_connector->connector = nullptr;
-        FreeProperties(m_connector);
+      m_connector->connector = GetConnector(m_fd, m_resources);
+      if (!m_connector->connector ||
+          !GetProperties(m_fd, m_connector->connector->connector_id, DRM_MODE_OBJECT_CONNECTOR, m_connector))
+        goto close;
 
-        m_module = module;
-        m_device_path = device;
+      m_mode = GetPreferredMode(m_connector->connector);
+      if (!m_mode)
+        goto close;
 
-        CLog::Log(LOGDEBUG, "CDRMUtils::%s - opened device: %s using module: %s", __FUNCTION__, device.c_str(), module);
-        return true;
+      m_crtc->crtc = GetCrtc(m_fd, m_resources, m_connector->connector);
+      if (!m_crtc->crtc ||
+          !GetProperties(m_fd, m_crtc->crtc->crtc_id, DRM_MODE_OBJECT_CRTC, m_crtc))
+        goto close;
+
+      m_plane_resources = drmModeGetPlaneResources(m_fd);
+      if (!m_plane_resources)
+        goto close;
+
+      m_crtc_index = GetCrtcIndex(m_resources, m_crtc->crtc);
+
+      m_primary_plane->plane = GetPlane(m_fd, m_plane_resources, m_crtc_index, DRM_PLANE_TYPE_PRIMARY);
+      if (!m_primary_plane->plane ||
+          !GetProperties(m_fd, m_primary_plane->plane->plane_id, DRM_MODE_OBJECT_PLANE, m_primary_plane))
+        goto close;
+
+      if (SupportsFormat(m_primary_plane->plane, DRM_FORMAT_ARGB8888))
+        m_primary_plane->format = DRM_FORMAT_ARGB8888;
+      else if (SupportsFormat(m_primary_plane->plane, DRM_FORMAT_XRGB8888))
+        m_primary_plane->format = DRM_FORMAT_XRGB8888;
+      else
+        goto close;
+
+      if (m_primary_plane->format == DRM_FORMAT_ARGB8888)
+      {
+        m_overlay_plane->plane = GetPlane(m_fd, m_plane_resources, m_crtc_index, DRM_PLANE_TYPE_OVERLAY);
+        if (m_overlay_plane->plane)
+        {
+          if (!GetProperties(m_fd, m_overlay_plane->plane->plane_id, DRM_MODE_OBJECT_PLANE, m_overlay_plane))
+            goto close;
+
+          if (SupportsFormat(m_overlay_plane->plane, DRM_FORMAT_ARGB8888))
+            m_overlay_plane->format = DRM_FORMAT_ARGB8888;
+          else
+            goto close;
+        }
       }
 
-      drmClose(m_fd);
-      m_fd = -1;
+      m_module = module;
+      m_device_path = device;
+
+      CLog::Log(LOGDEBUG, "CDRMUtils::%s - opened device: %s using module: %s", __FUNCTION__, device.c_str(), module);
+      return true;
+
+close:
+      CloseDrm();
     }
   }
 
   return false;
 }
 
-bool CDRMUtils::InitDrm()
+void CDRMUtils::CloseDrm()
 {
-  if(m_fd >= 0)
-  {
-    /* caps need to be set before allocating connectors, encoders, crtcs, and planes */
-    auto ret = drmSetClientCap(m_fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1);
-    if (ret)
-    {
-      CLog::Log(LOGERROR, "CDRMUtils::%s - failed to set Universal planes capability: %s", __FUNCTION__, strerror(errno));
-      return false;
-    }
+  if (m_fd >= 0)
+    drmClose(m_fd);
 
-    if(!GetResources())
-    {
-      return false;
-    }
+  m_fd = -1;
+  m_mode = nullptr;
 
-    if(!GetConnector())
-    {
-      return false;
-    }
+  drmModeFreeResources(m_resources);
+  m_resources = nullptr;
 
-    if(!GetEncoder())
-    {
-      return false;
-    }
+  drmModeFreePlaneResources(m_plane_resources);
+  m_plane_resources = nullptr;
 
-    if(!GetCrtc())
-    {
-      return false;
-    }
+  drmModeFreeConnector(m_connector->connector);
+  m_connector->connector = nullptr;
+  FreeProperties(m_connector);
 
-    if(!GetPlanes())
-    {
-      return false;
-    }
-  }
+  drmModeFreeCrtc(m_crtc->crtc);
+  m_crtc->crtc = nullptr;
+  FreeProperties(m_crtc);
 
-  drmModeFreeResources(m_drm_resources);
-  m_drm_resources = nullptr;
+  drmModeFreePlane(m_primary_plane->plane);
+  m_primary_plane->plane = nullptr;
+  m_primary_plane->format = 0;
+  FreeProperties(m_primary_plane);
 
-  if(m_fd < 0)
-  {
-    return false;
-  }
+  drmModeFreePlane(m_overlay_plane->plane);
+  m_overlay_plane->plane = nullptr;
+  m_overlay_plane->format = 0;
+  FreeProperties(m_overlay_plane);
+}
 
-  if(!GetPreferredMode())
-  {
+bool CDRMUtils::InitDrm()
+{
+  if (m_fd < 0)
     return false;
-  }
 
   drmSetMaster(m_fd);
 
@@ -630,73 +573,50 @@ void CDRMUtils::DestroyDrm()
   RestoreOriginalMode();
 
   drmDropMaster(m_fd);
-  close(m_fd);
-
-  m_fd = -1;
-
-  drmModeFreeResources(m_drm_resources);
-  m_drm_resources = nullptr;
-
-  drmModeFreeConnector(m_connector->connector);
-  FreeProperties(m_connector);
-  delete m_connector;
-  m_connector = nullptr;
-
-  drmModeFreeEncoder(m_encoder->encoder);
-  delete m_encoder;
-  m_encoder = nullptr;
 
-  drmModeFreeCrtc(m_crtc->crtc);
-  FreeProperties(m_crtc);
-  delete m_crtc;
-  m_crtc = nullptr;
-
-  drmModeFreePlane(m_primary_plane->plane);
-  FreeProperties(m_primary_plane);
-  delete m_primary_plane;
-
-  if (m_overlay_plane != m_primary_plane)
-  {
-    drmModeFreePlane(m_overlay_plane->plane);
-    FreeProperties(m_overlay_plane);
-    delete m_overlay_plane;
-  }
-  m_overlay_plane = nullptr;
-  m_primary_plane = nullptr;
+  CloseDrm();
 }
 
 bool CDRMUtils::GetModes(std::vector<RESOLUTION_INFO> &resolutions)
 {
   for(auto i = 0; i < m_connector->connector->count_modes; i++)
   {
+    drmModeModeInfoPtr mode = &m_connector->connector->modes[i];
     RESOLUTION_INFO res;
     res.iScreen = 0;
-    res.iWidth = m_connector->connector->modes[i].hdisplay;
-    res.iHeight = m_connector->connector->modes[i].vdisplay;
-    res.iScreenWidth = m_connector->connector->modes[i].hdisplay;
-    res.iScreenHeight = m_connector->connector->modes[i].vdisplay;
-    if (m_connector->connector->modes[i].clock % 5 != 0)
-      res.fRefreshRate = (float)m_connector->connector->modes[i].vrefresh * (1000.0f/1001.0f);
+    res.iScreenWidth = mode->hdisplay;
+    res.iScreenHeight = mode->vdisplay;
+    res.iWidth = res.iScreenWidth;
+    res.iHeight = res.iScreenHeight;
+
+    // TODO: limit iWidth/iHeight if enabled in settings
+    if (HasVideoPlane() && res.iScreenWidth >= 3840 && res.iScreenHeight >= 2160)
+    {
+      res.iWidth = mode->vrefresh > 30 ? 1280 : 1920;
+      res.iHeight = mode->vrefresh > 30 ? 720 : 1080;
+    }
+
+    if (mode->clock % 5 != 0)
+      res.fRefreshRate = (float)mode->vrefresh * (1000.0f/1001.0f);
     else
-      res.fRefreshRate = m_connector->connector->modes[i].vrefresh;
+      res.fRefreshRate = mode->vrefresh;
     res.iSubtitles = static_cast<int>(0.965 * res.iHeight);
     res.fPixelRatio = 1.0f;
     res.bFullScreen = true;
     res.strId = std::to_string(i);
 
-    if(m_connector->connector->modes[i].flags & DRM_MODE_FLAG_3D_MASK)
+    if(mode->flags & DRM_MODE_FLAG_3D_MASK)
     {
-      if(m_connector->connector->modes[i].flags & DRM_MODE_FLAG_3D_TOP_AND_BOTTOM)
+      if(mode->flags & DRM_MODE_FLAG_3D_TOP_AND_BOTTOM)
       {
         res.dwFlags = D3DPRESENTFLAG_MODE3DTB;
       }
-      else if(m_connector->connector->modes[i].flags
-          & DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF)
+      else if(mode->flags & DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF)
       {
         res.dwFlags = D3DPRESENTFLAG_MODE3DSBS;
       }
     }
-    else if(m_connector->connector->modes[i].flags & DRM_MODE_FLAG_INTERLACE)
+    else if(mode->flags & DRM_MODE_FLAG_INTERLACE)
     {
       res.dwFlags = D3DPRESENTFLAG_INTERLACED;
     }
@@ -710,5 +630,5 @@ bool CDRMUtils::GetModes(std::vector<RESOLUTION_INFO> &resolutions)
     resolutions.push_back(res);
   }
 
-  return resolutions.size() > 0;
+  return !resolutions.empty();
 }
diff --git a/xbmc/windowing/gbm/DRMUtils.h b/xbmc/windowing/gbm/DRMUtils.h
index a227491fba..4417cca309 100644
--- a/xbmc/windowing/gbm/DRMUtils.h
+++ b/xbmc/windowing/gbm/DRMUtils.h
@@ -39,7 +39,7 @@ struct drm_object
 struct plane : drm_object
 {
   drmModePlanePtr plane = nullptr;
-  uint32_t format;
+  uint32_t format = 0;
 };
 
 struct connector : drm_object
@@ -47,11 +47,6 @@ struct connector : drm_object
   drmModeConnectorPtr connector = nullptr;
 };
 
-struct encoder
-{
-  drmModeEncoder *encoder = nullptr;
-};
-
 struct crtc : drm_object
 {
   drmModeCrtcPtr crtc = nullptr;
@@ -67,15 +62,17 @@ class CDRMUtils
 {
 public:
   CDRMUtils();
-  virtual ~CDRMUtils() = default;
+  virtual ~CDRMUtils();
   virtual void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) {};
   virtual bool SetVideoMode(RESOLUTION_INFO& res, struct gbm_bo *bo) { return false; };
   virtual bool SetActive(bool active) { return false; };
   virtual bool InitDrm();
   virtual void DestroyDrm();
+  virtual void DisableVideoLayer() {};
 
   std::string GetModule() const { return m_module; }
   std::string GetDevicePath() const { return m_device_path; }
+  bool HasVideoPlane() const { return m_overlay_plane->plane != nullptr; }
 
   bool GetModes(std::vector<RESOLUTION_INFO> &resolutions);
   bool SetMode(RESOLUTION_INFO& res);
@@ -84,10 +81,9 @@ public:
   bool AddProperty(drmModeAtomicReqPtr req, struct drm_object *object, const char *name, uint64_t value);
   bool SetProperty(struct drm_object *object, const char *name, uint64_t value);
 
-  int m_fd;
+  int m_fd = -1;
 
   struct connector *m_connector = nullptr;
-  struct encoder *m_encoder = nullptr;
   struct crtc *m_crtc = nullptr;
   struct plane *m_primary_plane = nullptr;
   struct plane *m_overlay_plane = nullptr;
@@ -95,16 +91,14 @@ public:
   drmModeAtomicReq *m_req = nullptr;
 
 protected:
-  bool OpenDrm();
+  bool OpenDrm(bool atomic);
+  void CloseDrm();
   drm_fb * DrmFbGetFromBo(struct gbm_bo *bo);
 
+  int m_width = 0;
+  int m_height = 0;
+
 private:
-  bool GetResources();
-  bool GetConnector();
-  bool GetEncoder();
-  bool GetCrtc();
-  bool GetPlanes();
-  bool GetPreferredMode();
   bool RestoreOriginalMode();
   static void DrmFbDestroyCallback(struct gbm_bo *bo, void *data);
 
@@ -112,6 +106,7 @@ private:
   std::string m_module;
   std::string m_device_path;
 
-  drmModeResPtr m_drm_resources = nullptr;
+  drmModeResPtr m_resources = nullptr;
+  drmModePlaneResPtr m_plane_resources = nullptr;
   drmModeCrtcPtr m_orig_crtc = nullptr;
 };
diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
index f9a5f9494e..5aa4c4dc2a 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -132,13 +132,16 @@ bool CWinSystemGbm::CreateNewWindow(const std::string& name,
     return false;
   }
 
-  if(!m_GBM->CreateSurface(m_DRM->m_mode->hdisplay, m_DRM->m_mode->vdisplay))
+  if(!m_GBM->CreateSurface(res.iWidth, res.iHeight))
   {
     CLog::Log(LOGERROR, "CWinSystemGbm::%s - failed to initialize GBM", __FUNCTION__);
     return false;
   }
 
   m_bFullScreen = fullScreen;
+  m_nWidth = res.iWidth;
+  m_nHeight = res.iHeight;
+  m_fRefreshRate = res.fRefreshRate;
 
   CLog::Log(LOGDEBUG, "CWinSystemGbm::%s - initialized GBM", __FUNCTION__);
   return true;
@@ -154,8 +157,6 @@ bool CWinSystemGbm::DestroyWindow()
 
 void CWinSystemGbm::UpdateResolutions()
 {
-  CWinSystemBase::UpdateResolutions();
-
   UpdateDesktopResolution(CDisplaySettings::GetInstance().GetResolutionInfo(RES_DESKTOP),
                           0,
                           m_DRM->m_mode->hdisplay,
@@ -164,7 +165,7 @@ void CWinSystemGbm::UpdateResolutions()
 
   std::vector<RESOLUTION_INFO> resolutions;
 
-  if (!m_DRM->GetModes(resolutions) || resolutions.empty())
+  if (!m_DRM->GetModes(resolutions))
   {
     CLog::Log(LOGWARNING, "CWinSystemGbm::%s - Failed to get resolutions", __FUNCTION__);
   }
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
index c61afa336a..e505554b31 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -129,8 +129,8 @@ bool CWinSystemGbmGLESContext::CreateNewWindow(const std::string& name,
 
 bool CWinSystemGbmGLESContext::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays)
 {
-  if (res.iWidth != m_DRM->m_mode->hdisplay ||
-      res.iHeight != m_DRM->m_mode->vdisplay)
+  if (res.iWidth != m_nWidth ||
+      res.iHeight != m_nHeight)
   {
     CLog::Log(LOGDEBUG, "CWinSystemGbmGLESContext::%s - resolution changed, creating a new window", __FUNCTION__);
     CreateNewWindow("", fullScreen, res);
